package ru.netology.newtopmovies.database

import ru.netology.newtopmovies.data.Movie

internal fun MovieEntity.toMovie() = Movie(
    nameRu = title,
    humor = humor,
    music = music,
    dynamic = dynamic,
    image = image,
    dialogs = dialogs,
    heroes = heroes,
    antiheroes = antiheroes,
    story = story,
    drama = drama,
    repeat = repeat,
    idMovie = id,
    rating = rating,
    posterUrlPreview = urlImage,
    genres = genres,
    year = year,
    franchise = franchise,
    kinopoiskId = kinopoiskId,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    webUrl = webUrl,
    filmLength = filmLength,
    description = description,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries,
    sequelsAndPrequels = sequelsAndPrequels,
    review = review
)

internal fun Movie.toEntity() = MovieEntity(
    title = nameRu,
    humor = humor,
    music = music,
    dynamic = dynamic,
    image = image,
    dialogs = dialogs,
    heroes = heroes,
    antiheroes = antiheroes,
    story = story,
    drama = drama,
    repeat = repeat,
    id = idMovie,
    rating = rating,
    urlImage = posterUrlPreview,
    genres = genres,
    year = year,
    franchise = franchise,
    kinopoiskId = kinopoiskId,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    webUrl = webUrl,
    filmLength = filmLength,
    description = description,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries,
    sequelsAndPrequels = sequelsAndPrequels,
    review = review
)

internal fun SearchQueryEntity.toMovie() = Movie(
    nameRu = title,
    humor = humor,
    music = music,
    dynamic = dynamic,
    image = image,
    dialogs = dialogs,
    heroes = heroes,
    antiheroes = antiheroes,
    story = story,
    drama = drama,
    repeat = repeat,
    idMovie = id,
    rating = rating,
    posterUrlPreview = urlImage,
    genres = genres,
    year = year,
    franchise = franchise,
    kinopoiskId = kinopoiskId,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    webUrl = webUrl,
    filmLength = filmLength,
    description = description,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries,
    sequelsAndPrequels = sequelsAndPrequels,
    review = review
)

internal fun Movie.toSearchEntity() = SearchQueryEntity(
    title = nameRu,
    humor = humor,
    music = music,
    dynamic = dynamic,
    image = image,
    dialogs = dialogs,
    heroes = heroes,
    antiheroes = antiheroes,
    story = story,
    drama = drama,
    repeat = repeat,
    id = idMovie,
    rating = rating,
    urlImage = posterUrlPreview,
    genres = genres,
    year = year,
    franchise = franchise,
    kinopoiskId = kinopoiskId,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    webUrl = webUrl,
    filmLength = filmLength,
    description = description,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries,
    sequelsAndPrequels = sequelsAndPrequels,
    review = review
)




